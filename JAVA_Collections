package JAVACollections;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;
import java.util.Vector;

public class Collections {

	public static void arraylist(){
		
		ArrayList<String> al = new ArrayList<String>();
		al.add("AH-64E");
		al.add("MH-15/N");
		al.add("Dhruv-IN15A");
		
		for(String s : al){
			System.out.println(s);
			
		}
		
	}
	
	public void array(){
		
		
		
		
		
		
	}
	
	public static void vector(){
		
		Vector<String> vec = new Vector<String>();
		vec.add("Kalvari");
		vec.add("Karanj");
		
		for(int i=0; i<vec.size(); i++){
			System.out.println(vec.firstElement());
		}
		
	}
	
	public static void hashmap(){
		
		HashMap<String, Object> hmp = new HashMap<String, Object>();
		hmp.put("Destroyer", "kolkata");
		hmp.put("Frigate", "Talwar");
		hmp.put("Corvette", "Kamorta");
		hmp.put("Submarine", "Arighat");
		
		System.out.println(hmp.size());
		
		 for (Entry<String, Object> entry : hmp.entrySet())  
	            System.out.println("Key = " + entry.getKey() + 
	                             ", Value = " + entry.getValue());
		 
		 System.out.println(hmp.get("Corvette"));
		
		
	}
	
	public static int cast(){
		int i = 0;
		String s = "125";
		i = Integer.parseInt(s);
		float f = Float.parseFloat(s);
		System.out.println("Float Valuen is>>>" + f);
		
		return i;
		
	}
	
	public static void treemap(){
		
	    TreeMap<Integer,String> tmap = new TreeMap<Integer,String>();
	    tmap.put(1, "Data1");
	    tmap.put(23, "Data2");
	    tmap.put(70, "Data3");
	    tmap.put(4, "Data4");
	    tmap.put(2, "Data5");
	    
	    System.out.println(tmap.size());
	    
	    // ITERATING THE TREE MAP USING ENTRY SET
	    for (Entry<Integer, String> entry : tmap.entrySet())  
            System.out.println("Key = " + entry.getKey() + 
                             ", Value = " + entry.getValue());
	 
	    // DISPLAYING THE TREE MAP
	    System.out.println("The tree map is >>> " + "\n" +  tmap);
	    
	    
	    // ITERATING THE KEY USING SETKEY METHOD
	    for(int i : tmap.keySet()){
	    	System.out.println("Key is >> " + i);
	    }
	    
	 // ITERATING THE value USING VALUE METHOD
	    for(String S : tmap.values()) 
	    {
	    	System.out.println("Valus is >> " + S);
	    }
	    

	      
	}
}
****************************************************************************************************************************************
							Collections
Collection : Root interface with basic methods like add(), remove(), 
             contains(), isEmpty(), addAll(), ... etc.
 
Set : Doesn't allow duplicates. Example implementations of Set 
      interface are HashSet (Hashing based) and TreeSet (balanced
      BST based). Note that TreeSet implements SortedSet.

List : Can contain duplicates and elements are ordered. Example
       implementations are LinkedList (linked list based) and
       ArrayList (dynamic array based)

Queue : Typically order elements in FIFO order except exceptions
        like PriorityQueue.  

Deque : Elements can be inserted and removed at both ends. Allows
        both LIFO and FIFO. 

Map : Contains Key value pairs. Doesn't allow duplicates.  Example
      implementation are HashMap and TreeMap. 
      TreeMap implements SortedMap.
****************************************************************************************************************************************
							
         Collection                Map
         /     /    \      \            |
        /      /      \     \           |
     Set    List    Queue  Dequeue   SortedMap
     /
    /
 SortedSet 
            Core Interfaces in Collections

Note that this diagram only shows core interfaces
****************************************************************************************************************************************












