package JAVACollections;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;
import java.util.Vector;

public class Collections {

	public static void arraylist(){
		
		ArrayList<String> al = new ArrayList<String>();
		al.add("AH-64E");
		al.add("MH-15/N");
		al.add("Dhruv-IN15A");
		
		for(String s : al){
			System.out.println(s);
			
		}
		
	}
	
	public void array(){
		
		
		
		
		
		
	}
	
	public static void vector(){
		
		Vector<String> vec = new Vector<String>();
		vec.add("Kalvari");
		vec.add("Karanj");
		
		for(int i=0; i<vec.size(); i++){
			System.out.println(vec.firstElement());
		}
		
	}
	
	public static void hashmap(){
		
		HashMap<String, Object> hmp = new HashMap<String, Object>();
		hmp.put("Destroyer", "kolkata");
		hmp.put("Frigate", "Talwar");
		hmp.put("Corvette", "Kamorta");
		hmp.put("Submarine", "Arighat");
		
		System.out.println(hmp.size());
		
		 for (Entry<String, Object> entry : hmp.entrySet())  
	            System.out.println("Key = " + entry.getKey() + 
	                             ", Value = " + entry.getValue());
		 
		 System.out.println(hmp.get("Corvette"));
		
		
	}
	
	public static int cast(){
		int i = 0;
		String s = "125";
		i = Integer.parseInt(s);
		float f = Float.parseFloat(s);
		System.out.println("Float Valuen is>>>" + f);
		
		return i;
		
	}
	
	public static void treemap(){
		
	    TreeMap<Integer,String> tmap = new TreeMap<Integer,String>();
	    tmap.put(1, "Data1");
	    tmap.put(23, "Data2");
	    tmap.put(70, "Data3");
	    tmap.put(4, "Data4");
	    tmap.put(2, "Data5");
	    
	    System.out.println(tmap.size());
	    
	    // ITERATING THE TREE MAP USING ENTRY SET
	    for (Entry<Integer, String> entry : tmap.entrySet())  
            System.out.println("Key = " + entry.getKey() + 
                             ", Value = " + entry.getValue());
	 
	    // DISPLAYING THE TREE MAP
	    System.out.println("The tree map is >>> " + "\n" +  tmap);
	    
	    
	    // ITERATING THE KEY USING SETKEY METHOD
	    for(int i : tmap.keySet()){
	    	System.out.println("Key is >> " + i);
	    }
	    
	 // ITERATING THE value USING VALUE METHOD
	    for(String S : tmap.values()) 
	    {
	    	System.out.println("Valus is >> " + S);
	    }
	    

	      
	}
}
****************************************************************************************************************************************
							Collections
							
Collection : Root interface with basic methods like add(), remove(), 
             contains(), isEmpty(), addAll(), ... etc.
 
Set : Doesn't allow duplicates. Example implementations of Set 
      interface are HashSet (Hashing based) and TreeSet (balanced
      BST based). Note that TreeSet implements SortedSet.

List : Can contain duplicates and elements are ordered. Example
       implementations are LinkedList (linked list based) and
       ArrayList (dynamic array based)

Queue : Typically order elements in FIFO order except exceptions
        like PriorityQueue.  

Deque : Elements can be inserted and removed at both ends. Allows
        both LIFO and FIFO. 

Map : Contains Key value pairs. Doesn't allow duplicates.  Example
      implementation are HashMap and TreeMap. 
      TreeMap implements SortedMap.
****************************************************************************************************************************************
							
         Collection                Map
         /     /    \      \            |
        /      /      \     \           |
     Set    List    Queue  Dequeue   SortedMap
     /
    /
 SortedSet 
            Core Interfaces in Collections

Note that this diagram only shows core interfaces
****************************************************************************************************************************************
							ARRAY_LIST
							
Arraylist class implements List interface and it is based on an Array data structure.
It is widely used because of the functionality and flexibility it offers. Most of the developers choose Arraylist over Array as 
itâ€™s a very good alternative of traditional java arrays. ArrayList is a resizable-array implementation of the List interface. 
It implements all optional list operations, and permits all elements, including null.
****************************************************************************************************************************************
							LINKED_LIST
							
Similar to arrays in Java, LinkedList is a linear data structure. However LinkedList elements are not stored in contiguous locations 
like arrays, they are linked with each other using pointers. Each element of the LinkedList has the reference(address/pointer) to the 
next element of the LinkedList.
****************************************************************************************************************************************
							VECTOR
							
Vector implements List Interface. Like ArrayList it also maintains insertion order but it is rarely used in non-thread environment as it is synchronized and due to which it gives poor performance in searching, adding, delete and update of its elements.

SYNTAX:
Vector object= new vector(int initialcapacity, capacityIncrement)
****************************************************************************************************************************************
							ITERATOR
							
Iterator is used for iterating (looping) various collection classes such as HashMap, ArrayList, LinkedList etc. Iterator is used for iterating (looping) various collection classes such as HashMap, ArrayList, LinkedList etc. 
****************************************************************************************************************************************

							Collections in detail
							
1.) Array List:-

ArrayList<String> alist=new ArrayList<String>();        -    {Creating the arrayList}
alist.add("Steve");					-    {Addng the elements to arrayList}
alist.add(1,"Steve");					-    {Addng the elements at specified Index position}
alist.set(0, "Lucy");					-    {Changing element}
alist.remove("Steve");					-    {Removing element}
alist.size()						-    {Size of arraylist}
alist.add(1, "Justin");					-    {Adding element at specified Index}
alist.remove("Chaitanya");				-    {Removes "Chaitanya"}
alist.remove(1);  					-    {Removes second element}
Collections.sort(alist);                                -    {Sorts the arralList}
Collections.reverse(alist);                             -    {Reverses the arralList}
alist.clear();						-    {Clears the List}


2.) Hashmap:-

HashMap is a Map based collection class that is used for storing Key & value pairs, it is denoted as HashMap<Key, Value> or HashMap<K, V>. This class makes no guarantees as to the order of the map. It is similar to the Hashtable class except that it is unsynchronized and permits nulls(null values and null key).

HashMap<Integer, String> hmap = new HashMap<Integer, String>();              -		{Creates and initializes HashMap}
hmap.put(0, "Arihant");							     -		{Inserts key value mapping into the map}
hmap.keySet();								     -		{returns the Set of the keys}
hmap.values();								     -		{returns a collection of values}		
hmap.get('Key');							     -		{returns the value for the specified key}
hmap.remove('Key');							     -		{removes the key-value pair for specified key}
hmap.Putall(hmap2);							     -		{ Copies all the elements of a map to the another specified map}










