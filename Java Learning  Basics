Basic code compilation for Java:-

Source Code(.Java file) ------> Compiler(Javac)--------> ByteCode(.Class File)---------> JVM (Interpreter for Various OS).
******************************************************************************************************************************************

Java is a high level programming language. A program written in high level language cannot be run on any machine directly. First, it needs to be translated into that particular machine language. The javac compiler does this thing, it takes java program (.java file containing source code) and translates it into machine code (referred as byte code or .class file).

Java Virtual Machine (JVM) is a virtual machine that resides in the real machine (your computer) and the machine language for JVM is byte code. This makes it easier for compiler as it has to generate byte code for JVM rather than different machine code for each type of machine. JVM executes the byte code generated by compiler and produce output. JVM is the one that makes java platform independent.

So, now we understood that the primary function of JVM is to execute the byte code produced by compiler. Each operating system has different JVM, however the output they produce after execution of byte code is same across all operating systems. Which means that the byte code generated on Windows can be run on Mac OS and vice versa. That is why we call java as platform independent language.
******************************************************************************************************************************************

							DATA VARIABLES IN JAVA:-

There are three types of Variables in Java and they are:-

1.) STATIC or CLASS VARIABLE -->  Static variables are also known as class variable because they are associated with the class and common for all the instances of class. For example, If I create three objects of a class and access this static variable, it would be common for all, the changes made to the variable using one of the object would reflect when you access it through other objects.

Example of static variable:-


public class StaticVarExample {
   public static String myClassVar="class or static variable";
	
   public static void main(String args[]){
      StaticVarExample obj = new StaticVarExample();
      StaticVarExample obj2 = new StaticVarExample();
      StaticVarExample obj3 = new StaticVarExample();
      
      //All three will display "class or static variable"
      System.out.println(obj.myClassVar);
      System.out.println(obj2.myClassVar);
      System.out.println(obj3.myClassVar);

      //changing the value of static variable using obj2
      obj2.myClassVar = "Changed Text";

      //All three will display "Changed Text"
      System.out.println(obj.myClassVar);
      System.out.println(obj2.myClassVar);
      System.out.println(obj3.myClassVar);
   }
}



2.) INSTANCE VARIABLE-->  Each instance(objects) of class has its own copy of instance variable. Unlike static variable, instance variables have their own separate copy of instance variable. We have changed the instance variable value using object obj2 in the following program and when we displayed the variable using all three objects, only the obj2 value got changed, others remain unchanged. This shows that they have their own copy of instance variable.

Example of static variable:-

public class InstanceVarExample {
   String myInstanceVar="instance variable";
	
   public static void main(String args[]){
	InstanceVarExample obj = new InstanceVarExample();
	InstanceVarExample obj2 = new InstanceVarExample();
	InstanceVarExample obj3 = new InstanceVarExample();
		
	System.out.println(obj.myInstanceVar);
	System.out.println(obj2.myInstanceVar);
	System.out.println(obj3.myInstanceVar);

		
	obj2.myInstanceVar = "Changed Text";

		
	System.out.println(obj.myInstanceVar);
	System.out.println(obj2.myInstanceVar);
	System.out.println(obj3.myInstanceVar);
   }
}

3.) LOCAL VARIABLE-->  These variables are declared inside method of the class. Their scope is limited to the method which means that You can’t change their values and access them outside of the method.

Example of Local variable


public class VariableExample {
   // instance variable
   public String myVar="instance variable";
    
   public void myMethod(){
    	// local variable
    	String myVar = "Inside Method";
    	System.out.println(myVar);
   }
   public static void main(String args[]){
      // Creating object
      VariableExample obj = new VariableExample();
    	
      /* We are calling the method, that changes the 
       * value of myVar. We are displaying myVar again after 
       * the method call, to demonstrate that the local 
       * variable scope is limited to the method itself.
       */
      System.out.println("Calling Method");
      obj.myMethod();
      System.out.println(obj.myVar);
   }
}
******************************************************************************************************************************************

							DATA TYPES IN JAVA

There are following Data types that we use in java and they are:-

1.) byte, short, int, long -->  forstoring Whole Numbers.
2.) Float and Double-->  are used to store the fractional values.
3.) char-->  are used to store the Characters.
4.) Boolean-->  to hold True or False values.

BYTE  -   This can hold whole number between -128 and 127.
SHORT -   This can hold whole number between  -32,768 to 32767
INT   -   This can hold whole number between -2,147,483,648 to 2,147,483,647
LONG  -   This can hold whole number between 9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.

*******************************************************************************************************************************************
						OPERATORS IN JAVA
1.) BASIC ARITHMETIC OPERATORS:-
   +  for "Addition"
   -  for "subtraction"
   *  for "multiplication'
   %  for "modulo"  -->  means for getting remainder
   
2.) ASSIGNMENT OPERATORS:-
   =, +=, -=, *=, /=, %=  etc. just see them once.
   
3.) AUTO INCREMENT and DECREMENT OPERATORS:-
   ++, --

4.) LOGICAL OPERATORS:-
   &&, ||,  !
   
5.) COMPARISON or RELATIONAL OPERATORS:-
    We have six relational operators in Java: ==, !=, >, <, >=, <=

== returns true if both the left side and right side are equal

!= returns true if left side is not equal to the right side of operator.

> returns true if left side is greater than right.

< returns true if left side is less than right side.

>= returns true if left side is greater than or equal to right side.

<= returns true if left side is less than or equal to right side.

6.) BITWISE OPERATORS:-
There are six bitwise Operators: &, |, ^, ~, <<, >>  ---->  Just see them, if required.
*******************************************************************************************************************************************

					ACCESS MODIFIERS
				
The scope of access modifiers in tabular form
------------+-------+---------+--------------+--------------+--------
            | Class | Package | Subclass     | Subclass     |Outside|
            |       |         |(same package)|(diff package)|Class  |
————————————+———————+—————————+——————————----+—————————----—+————————
public      | Yes   |  Yes    |    Yes       |    Yes       |   Yes |    
————————————+———————+—————————+—————————----—+—————————----—+————————
protected   | Yes   |  Yes    |    Yes       |    Yes       |   No  |    
————————————+———————+—————————+————————----——+————————----——+————————
default     | Yes   |  Yes    |    Yes       |    No        |   No  |
————————————+———————+—————————+————————----——+————————----——+————————
private     | Yes   |  No     |    No        |    No        |   No  |
------------+-------+---------+--------------+--------------+--------
****************************************************************************************************************************************


 





